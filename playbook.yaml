---
# List of plays
-
  # Hosts: where our play will run and options it will run with
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: always

  # Vars: variables that will apply to the play, on all targets 

  # Tasks: the list of tasks that will be executed within 
  #        the play, this section can also be used for 
  #        pre and post tasks
  tasks:
    # from https://superuser.com/questions/1395954/ansible-playbook-to-determine-os-release
  - name: System details
    debug: msg="{{ item }}"
    with_items: 
    - "{{ ansible_distribution }}"
    - "{{ ansible_distribution_version }}"
    - "{{ ansible_distribution_major_version }}"
    # Detect if we are running on a WSL2 environment
  - name: Set wsl2_environment fact default to false
    set_fact:
      wsl2_environment: false
  - name: Set wsl2_environment fact True
    set_fact:
      wsl2_environment: true
    when: ansible_kernel is search("microsoft-standard-WSL2")  
  # fix for .gnupg/ permissions when building custom images
  - name: Add fix for .gnupg/ permissions
    lineinfile:
      path: "/etc/bash.bashrc"
      line: "chmod 700 ~/.gnupg/"    
  - name: Add custom prompt to /etc/skel/.profile
    lineinfile:
      path: "/etc/skel/.profile"
      line: 'export PS1="\e[0;32m[\w]\$ \e[0m"'

  # Handlers: the list of handlers that are executed as a notify 
  #           key from a task

  # Roles: list of roles to be imported into the play
  roles:
  - role: irixjp.role_example_hello

# Add additional plays here (remember the list entry -)
# Be sure to use the same hosts and connection entries above
# addtional plays

-
  # install keychain and git
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_git_keychain

  vars:
    git_version: "2.35.1"
    git_version_to_install: "1:{{ git_version }}-0ppa1~ubuntu20.04.1"
    keychain_version: "2.8.5"
    keychain_version_to_install: "{{ keychain_version }}-1"
    keychain_version_expected: "{{ keychain_version }}.."

  tasks:
  - name: Add git PPA
    shell: add-apt-repository ppa:git-core/ppa
  - name: Install git
    apt:
      name: "git={{ git_version_to_install }}"  
  - name: Install Keychain
    apt:
      name: "keychain={{ keychain_version_to_install }}"
      update_cache: yes
  - name: Get git version
    shell: git version | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_git_version
  - name: Get keychain version
    shell: 
      cmd: keychain -V 2> >(grep -i keychain) 2> >(sed 's/[[:alpha:]|(|[:space:]]//g') | fgrep '*' | sed 's/[*~://]//g'
      executable: /bin/bash
    register: installed_keychain_version
  - name: Display git and keychain versions
    debug:
      msg: "git = {{ installed_git_version.stdout }} | keychain = {{ installed_keychain_version.stdout }}"
  - name: Test git version
    fail:
      msg: "Git Version Error: Expected {{ git_version }} | Found {{ installed_git_version.stdout }}"
    when: installed_git_version.stdout != git_version  
  - name: Test keychain version
    fail:
      msg: "Keychain Version Error: Expected {{ keychain_version_expected }} | Found {{ installed_keychain_version.stdout }}"
    when: installed_keychain_version.stdout != keychain_version_expected        

-
  # Install knowledge capture tools
  hosts: localhost
  connection: local
  tags: install_knowledge_tools

  tasks:
  - name: Install flatpak
    apt:
      name: flatpak
      update_cache: yes  
  - name: Configure flatpak
    shell:
      cmd: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo    
  - name: Install Obsidian
    shell: 
      cmd: flatpak install --system --assumeyes --noninteractive flathub md.obsidian.Obsidian    
  - name: Set up Obsidian shortcut
    shell:
      cmd: cp /var/lib/flatpak/exports/share/applications/md.obsidian.Obsidian.desktop /usr/share/applications/md.obsidian.Obsidian.desktop && cp /var/lib/flatpak/exports/share/icons/hicolor/512x512/apps/md.obsidian.Obsidian.png /usr/share/icons/hicolor/512x512/apps/md.obsidian.Obsidian.png  
  - name: Install JabRef
    shell:
      cmd: flatpak install --system --assumeyes --noninteractive flathub org.jabref.jabref
  - name: Set up JabRef shortcut
    shell:
      cmd: cp /var/lib/flatpak/exports/share/applications/org.jabref.jabref.desktop /usr/share/applications/org.jabref.jabref.desktop && cp /var/lib/flatpak/exports/share/icons/hicolor/128x128/apps/org.jabref.jabref.png /usr/share/icons/hicolor/128x128/apps/org.jabref.jabref.png

-
  # install readers
  hosts: localhost
  connection: local
  tags: install_readers

  tasks:
  - name: install Evince
    apt:
      name: evince
      update_cache: yes

  roles:
  - role: webarchitect609.google_chrome

-
  # install Pandoc & TexLive
  hosts: localhost
  connection: local
  gather_facts: yes
  tags: install_generator_pandoc

  vars:
    pandoc_version: "2.17.0.1"
    texlive_version: "2019.20200218-1"
    texlive_version_expected: "pdfTeX 3.14159265-2.6-1.40.20 (TeX Live 2019/Debian)"
    # https://mikefarah.gitbook.io/yq/
    yq_version: v4.20.2
    yq_executable: yq_linux_amd64

  tasks:
  - name: install TeX Live
    apt:
      name: "texlive={{ texlive_version }}"  
      update_cache: yes
    # https://github.com/mikefarah/yq/#install  
  - name: Install yq
    shell:
      cmd: "wget https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/{{ yq_executable }} -O /usr/bin/yq && chmod +x /usr/bin/yq"
  - name: Get pandoc version
    shell: pandoc --version | grep -m 1 -i pandoc | sed 's/[[:alpha:]|(|[:space:]]//g'
    register: installed_pandoc_version
  - name: Get TeX Live version  
    shell: latex --version | grep -i Tex -m 1 
    register: installed_texlive_version
  - name: Display pandoc and texlive versions
    debug:
      msg: "pandoc = {{ installed_pandoc_version.stdout }} | texlive = {{ installed_texlive_version.stdout }}"
  - name: Test pandoc version
    fail:
      msg: "Pandoc Version Error: Expected {{ pandoc_version }} | Found {{ installed_pandoc_version.stdout }}"
    when: installed_pandoc_version.stdout != pandoc_version    
  - name: Test texlive version
    fail:
      msg: "TeX Live Version Error: Expected {{ texlive_version_expected }} | Found {{ installed_texlive_version.stdout }}"
    when: installed_texlive_version.stdout != texlive_version_expected        

  roles:
  - role: andrewrothstein.pandoc
    pandoc_ver: "{{ pandoc_version }}"

# Three dots indicate the end of a YAML document
...
